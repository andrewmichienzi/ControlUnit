############################################################################
#
# A small test including all Phase 1 instructions. This one mainly
# focuses on memory access and branching.
#
# Good luck!
###########################################################################
	

.data
firstHex:    65535

secondHex:   0
	
# Random values to be used later on

val0:      1

val1:      101

val2:      1048576

val3:      103

val4:      0


.text

# Here comes the fun stuff
begin:
lw $21, firstHex	# $21 = 0x0000FFFF
lui $22, 0xFFFF		# $22 = 0xFFFF0000
ori $23, $22, 0xFFFF	# $23 = 0xFFFFFFFF = 0xFFFF0000 | 0x0000FFFF 

addi $20, $0, 0	        # Set $20 to zero

add $20, $20, $21	# Add 65,535 to $20 


sw $21, val0
sw $21, secondHex	# secondHex should now also be 65,535
add $21, $0, $0		# $21 = 0
lw $21, secondHex	# $21 = 65,535

beq $20, $0, begin	# if $20 is zero, go to top; this should NOT happen

beq $20, 131070, end	# if $20 is 65,535 * 2, go to end; this should NOT happen, if it does, we previously jumped to top 
	
addi $8, $0, -65435	# $8 = -65,435
lw $10, firstHex	# $10 = 65,535
add $10, $10, $8	# $10 = 100